/* eslint-disable no-unused-expressions */
import '@custom-styles/basic/custom-form.scss';
import '@custom-styles/merchandising/others/custom-table.scss';
import '@custom-styles/merchandising/others/packaging-sc-combination-table.scss';
import React, { Fragment, useEffect, useState } from 'react';
import { ChevronDown, ChevronUp } from 'react-feather';
import { useForm } from 'react-hook-form';
import { useDispatch, useSelector } from 'react-redux';
import { useHistory } from 'react-router';
import CreatableSelect from 'react-select/creatable';
import {
    Button,
    Card,
    CardBody,
    Col,
    Collapse, Input,
    Label,
    NavItem,
    NavLink,
    Row,
    Table
} from 'reactstrap';
import ActionMenu from '../../../../layouts/components/menu/action-menu';
import { selectSizeColorType, sizeColorTypeEnumObj } from '../../../../utility/enums';
import { randomIdGenerator, selectThemeColors } from '../../../../utility/Utils';
import { getBuyersStyles, getDropDownBuyers } from '../../buyer/store/actions';
import { getColorDropDownByStyleId } from '../../color/store/actions';
import { getPurchaseOrdersDropdownByBuyerId, getStylesByPOById } from '../../purchase-order/store/actions';
import { getSizeDropDownByStyleId } from '../../size/store/actions';
import SinglePackagingDetails from '../details/SinglePackagingDetails';
import { addPackaging, getSinglePackingDetail } from '../store/action';
import PackagingAccessoriesDetails from './SinglePackagingAccessoriesDetails';


const defaultValueSizeColorDetails = [];

const defaultPackagingInfo = {
    buyer: null,
    style: null,
    purchaseOrder: null,
    size: [],
    color: [],
    cartoonSeriesNo: '',
    accessoriesTypeQty: '',
    netWeight: 0,
    grossWeight: 0,
    length: 0,
    width: 0,
    height: 0,
    totalPackSize: 0,
    sizeColorDetails: []
};
const PackagingForSingleStyle = () => {
    const { replace } = useHistory();
    const dispatch = useDispatch();
    const { singlePackagingAccessoriesDetails } = useSelector( ( { packaging } ) => packaging );

    const { styleColorsDropdown } = useSelector( ( { colors } ) => colors );
    const { styleSizesDropdown } = useSelector( ( { sizes } ) => sizes );
    const { singlePackagingDetails } = useSelector( ( { packaging } ) => packaging );

    const { register, errors, control, handleSubmit } = useForm();
    const [color, setColor] = useState( [] );
    const [size, setSize] = useState( [] );
    const [sizeColorDetails, setSizeColorDetails] = useState( defaultValueSizeColorDetails );
    const getSizeColorFieldId = sizeColorDetails.map( i => i.fieldId );
    const [colorSizeType, setColorSizeType] = useState( null );


    const [packagingInfo, setPackagingInfo] = useState( defaultPackagingInfo );


    const [packagingInfoOpen, setPackagingInfoOpen] = useState( true );
    const [packagingDetailsOpen, setPackagingDetailsOpen] = useState( true );
    const { dropDownBuyers, buyerStylesDropdown } = useSelector( ( { buyers } ) => buyers );
    const { buyerPurchaseOrderDropdown, POStyles } = useSelector( ( { purchaseOrders } ) => purchaseOrders );


    // useEffect( () => {
    //     // dispatch( getPurchaseOrderById( poId ) );
    //     //   dispatch( getStylesByPOById( poId ) );
    // }, [dispatch, poId] );

    useEffect( () => {
        dispatch( getDropDownBuyers() );
    }, [] );


    ///Buyer Dropdown OnFocus
    const handleBuyerDropdownOnFocus = () => {
        dispatch( getDropDownBuyers() );
    };

    ///OnChange Buyer Dropdown
    const handleBuyerDropdown = ( data ) => {
        if ( data ) {
            const updatedObj = {
                ...packagingInfo,
                buyer: data
            };
            setPackagingInfo( updatedObj );
            dispatch( getPurchaseOrdersDropdownByBuyerId( data.value ) );
        } else {
            dispatch( getBuyersStyles( null ) );
            const updatedObj = {
                ...packagingInfo,
                buyer: null,
                style: null
            };
            setPackagingInfo( updatedObj );
        }
        dispatch( getSinglePackingDetail( null ) );

    };

    ///OnChange Style Dropdown
    const handlePoDropdown = ( data ) => {
        console.log( data );
        const updatedObj = {
            ...packagingInfo,
            purchaseOrder: data
        };
        setPackagingInfo( updatedObj );
        dispatch( getStylesByPOById( data?.value ) );
        dispatch( getSinglePackingDetail( null ) );
    };


    const handleStyleDropDownChange = ( data ) => {
        if ( data ) {
            setPackagingInfo( {
                ...packagingInfo, style: data
            } );
            dispatch( getSizeDropDownByStyleId( data.value ) );
            dispatch( getColorDropDownByStyleId( data.value ) );
            dispatch( getSinglePackingDetail( packagingInfo.buyer?.value, packagingInfo.purchaseOrder?.value, data?.value ) );

        } else {
            dispatch( getSinglePackingDetail( null ) );
            setPackagingInfo( {
                ...packagingInfo, style: data
            } );
            setSize( [] );
            setColor( [] );
            setSizeColorDetails( [] );
        }
    };


    const handleChangeSizeColorType = ( data ) => {
        setSize( [] );
        setColor( [] );
        setColorSizeType( data );
        setSizeColorDetails( [] );
    };


    const handleColorDropDownChange = ( data ) => {
        //Color Dropdown Data on color State
        let dataManipulation = [];
        if ( data === null || data === [] ) {
            dataManipulation = [];
        } else if ( Array.isArray( data ) ) {
            dataManipulation = data;
        } else {
            dataManipulation.push( data );
        }
        setColor( dataManipulation );
        ///New Color Data Checking
        const comparerForAdd = ( otherArray ) => {
            return function ( current ) {
                return otherArray.filter( function ( other ) {
                    return other.colorName === current.label;
                } ).length === 0;
            };
        };
        ///Delete Color Data Checking
        const comparerForDelete = ( otherArray ) => {
            return function ( current ) {
                return otherArray.filter( function ( other ) {
                    return other.label === current.colorName;
                } ).length === 0;
            };
        };
        // //New Color Object
        const findLastSelectedColor = dataManipulation?.find( comparerForAdd( sizeColorDetails ) );
        // //Delete Color Object
        const findLastDeletedColor = sizeColorDetails?.find( comparerForDelete( dataManipulation ) );

        // //New Color Data Entry
        if ( findLastSelectedColor !== undefined ) {
            const lastObjModified = {
                fieldId: randomIdGenerator(),
                colorId: findLastSelectedColor.value,
                colorName: findLastSelectedColor.label,
                size: sizeColorDetails?.some( c => c.size ) ? ( sizeColorDetails?.map( ( cs => cs.size.map( s => ( {
                    fieldId: randomIdGenerator(),
                    sizeId: s.sizeId,
                    sizeName: s.sizeName,
                    inputValue: 0
                } ) ) )
                ) )[0] : []
            };
            sizeColorDetails.push( lastObjModified );
        }
        // //Remove Color Data
        if ( findLastDeletedColor !== undefined ) {
            if ( dataManipulation.length === 0 ) {
                const lastUpdated = [...sizeColorDetails];
                lastUpdated.splice(
                    lastUpdated.findIndex(
                        x => x.colorName === findLastDeletedColor.colorName
                    )
                );
                setSizeColorDetails( lastUpdated );
                setSize( [] );
            } else {
                const lastUpdated = [...sizeColorDetails];
                lastUpdated.splice(
                    lastUpdated.findIndex(
                        x => x.colorName === findLastDeletedColor.colorName
                    ), 1
                );
                setSizeColorDetails( lastUpdated );
            }
        }
    };

    ///While Size Dropdown
    const handleSizeDropDownChange = ( data ) => {
        let dataManipulation = [];
        if ( data === null || data === [] ) {
            dataManipulation = [];
        } else if ( Array.isArray( data ) ) {
            dataManipulation = data;
        } else {
            dataManipulation.push( data );
        }
        setSize( dataManipulation );
        //For Entry and  Delete Size Checking
        const getAllModifiedSize = ( sizeColorDetails?.map( c => ( {
            size: c.size
        } ) ) );
        const getOldSizeArray = getAllModifiedSize[0].size;

        //Find New Size Entry
        const comparerForAdd = ( otherArray ) => {
            return function ( current ) {
                return otherArray.filter( function ( other ) {
                    return other.sizeName === current.label;
                } ).length === 0;
            };
        };
        //Find Deleted Size Entry
        const comparerForDelete = ( otherArray ) => {
            return function ( current ) {
                return otherArray.filter( function ( other ) {
                    return other.label === current.sizeName;
                } ).length === 0;
            };
        };
        const findLastSelectedSize = dataManipulation?.find( comparerForAdd( getOldSizeArray ) );
        const findLastDeletedSize = getOldSizeArray.find( comparerForDelete( dataManipulation ) );

        /// New Entry Push
        if ( findLastSelectedSize !== undefined ) {
            const updateInputValue = sizeColorDetails?.map( ii => {
                if ( getSizeColorFieldId.some( i => ii.fieldId === i ) ) {
                    ii.fieldId;
                    ii.colorId;
                    ii.colorName;
                    ii.size.push( {
                        fieldId: randomIdGenerator(),
                        sizeId: findLastSelectedSize.value,
                        sizeName: findLastSelectedSize.label,
                        inputValue: 0
                    } );
                }
                return ii;
            } );
            setSizeColorDetails( updateInputValue );
        }

        /// After Deleted
        if ( findLastDeletedSize !== undefined ) {
            if ( dataManipulation.length === 0 ) {
                const updateInputValue = sizeColorDetails?.map( ii => {
                    if ( getSizeColorFieldId.some( i => ii.fieldId === i ) ) {
                        ii?.size.splice(
                            ii.size.findIndex( s => s.sizeName === findLastDeletedSize.sizeName ) );
                    }
                    return ii;
                } );
                setSizeColorDetails( updateInputValue );
            } else {
                const updateInputValue = sizeColorDetails?.map( ii => {
                    if ( getSizeColorFieldId.some( i => ii.fieldId === i ) ) {
                        ii?.size.splice(
                            ii.size.findIndex( s => s.sizeName === findLastDeletedSize.sizeName ), 1 );
                    }
                    return ii;
                } );
                setSizeColorDetails( updateInputValue );
            }
        }
    };


    ///Input Value Onchange
    const handleSizeInputValueOnChange = ( e, fieldId, sizeFieldId ) => {
        const updateInputValue = sizeColorDetails?.map( i => {
            if ( fieldId === i.fieldId ) {
                i?.size.map( is => {
                    if ( ( ( sizeFieldId === is.fieldId ) ) ) {
                        is.inputValue = e.target.value;
                    }
                    return is;
                } );
            }
            return i;
        } );
        setSizeColorDetails( updateInputValue );
    };


    const onSubmit = () => {
        const submitObj = {
            buyerId: packagingInfo.buyer?.value,
            styleId: packagingInfo.style?.value,
            orderId: packagingInfo.purchaseOrder?.value,
            totalPackSize: packagingInfo.totalPackSize,
            cartonNoSeries: packagingInfo.cartoonSeriesNo,
            netWeight: packagingInfo.netWeight,
            grossWeight: packagingInfo.grossWeight,
            length: packagingInfo.length,
            width: packagingInfo.width,
            height: packagingInfo.height,
            packagingType: colorSizeType.value,
            packagingDetails: sizeColorDetails.map( i => (
                i.size.map( ii => ( {
                    colorId: i.colorId,
                    // colorName: i.colorName,
                    styleId: packagingInfo.style.value,
                    sizeId: ii.sizeId,
                    quantity: Number( ii.inputValue )
                } ) )
            ) ).flat(),

            accessories: singlePackagingAccessoriesDetails.map( acc => ( {
                id: 0,
                itemGroupId: acc.itemGroup?.value,
                itemGroupName: acc.itemGroup?.label,
                itemSubGroupId: acc.itemSubGroup?.value,
                itemSubGroupName: acc.itemSubGroup?.label,
                itemDescription: acc.itemDescriptionValue?.label,
                itemDescriptionTemplate: acc.itemDescriptionTemplate,
                consumptionUOM: acc.consumptionUom?.label,
                wastagePercent: acc.wastagePercent,
                consumptionRatePerUnit: acc.consumptionRatePerUnit,
                consumptionQuantity: acc.consumptionQuantity,
                consumptionCost: acc.consumptionCost,
                inHouseQuantity: acc.inHouseQuantity,
                inHouseRatePerUnit: acc.inHouseRatePerUnit,
                inHouseCost: acc.inHouseQuantity * acc.inHouseRatePerUnit,
                remarks: "string"
            } ) )
        };
        console.log( 'submitObj', JSON.stringify( submitObj, null, 2 ) );
        dispatch( addPackaging( submitObj ) );
        // const fieldIdForPackagingDetails = randomIdGenerator();
        // const unitPerPackSum = _.sum( sizeColorDetails.map( i => _.sum( i.size.map( s => Number( s.inputValue ) ) ) ) );

    };


    const handleInputChange = ( e ) => {
        const { name, value, type } = e.target;
        const updateObj =
        {
            ...packagingInfo,
            [name]: type === 'number' ? Number( value ) : value
        };

        setPackagingInfo( updateObj );
    };

    const handlePackingInfoClear = () => {
        setPackagingInfo( defaultPackagingInfo );
        setSize( [] );
        setColor( [] );
        setColorSizeType( null );
        setSizeColorDetails( defaultValueSizeColorDetails );
    };

    const handleCancel = () => {
        replace( '/purchase-order' );
    };


    const breadcrumb = [
        {
            id: 'home',
            name: 'Home',
            link: "/",
            isActive: false
        },
        {
            id: 'Purchaser Order',
            name: 'List',
            link: "/purchase-order",
            isActive: false
        }
    ];
    return (
        <div>
            <Card className="mt-3">
                <ActionMenu breadcrumb={breadcrumb} title='Single Packaging' >
                    <NavItem className="mr-1" >
                        <NavLink
                            tag={Button}
                            size="sm"
                            color="primary"
                            type="submit"
                            onClick={() => { onSubmit(); }}
                        >Save</NavLink>
                    </NavItem>
                    <NavItem className="mr-1" >
                        <NavLink
                            tag={Button}
                            size="sm"
                            color="secondary"
                            onClick={() => { handleCancel(); }}                    >
                            Cancel
                        </NavLink>
                    </NavItem>
                    <NavItem className="mr-1" >
                        <NavLink
                            tag={Button}
                            size="sm"
                            color="secondary"
                            onClick={() => { handlePackingInfoClear(); }}                    >
                            Clear
                        </NavLink>
                    </NavItem>
                </ActionMenu>


                <CardBody >
                    <Row className='border-bottom '>
                        <Col>
                            <div onClick={() => { setPackagingInfoOpen( !packagingInfoOpen ); }}>
                                <div className='d-flex justify-content-between'>
                                    <span className={packagingInfoOpen ? 'font-weight-bolder border-bottom-success border-2' : 'font-weight-bolder'}>
                                        Packaging Info
                                    </span>
                                    <span >
                                        <Button.Ripple style={{ padding: '0.4rem' }} className='btn-icon' size="sm" color='flat-secondary'>
                                            <ChevronUp
                                                hidden={packagingInfoOpen}
                                                size={18}
                                                color='grey'
                                                onClick={() => { setPackagingInfoOpen( !packagingInfoOpen ); }}
                                            />
                                            <ChevronDown
                                                hidden={!packagingInfoOpen}
                                                size={18}
                                                color='grey'
                                                onClick={() => { setPackagingInfoOpen( !packagingInfoOpen ); }}
                                            />
                                        </Button.Ripple>

                                    </span>
                                </div>
                            </div>
                            <Collapse isOpen={packagingInfoOpen}>
                                <div className="p-1">
                                    <Row className="border rounded rounded-3 p-1">
                                        <Col>
                                            <Row>
                                                <Col xs={12} sm={12} md={7} lg={7}>
                                                    <Row>
                                                        <Col xs={12} sm={12} md={5} lg={5} xl={5}>
                                                            <div className='custom-form-main'>
                                                                <Label className='custom-form-label' for='buyerId'>Buyer</Label>
                                                                <Label className='custom-form-colons'> : </Label>
                                                                <div className='custom-form-group'>
                                                                    <CreatableSelect
                                                                        id='buyerId'
                                                                        name="buyer"
                                                                        isSearchable
                                                                        menuPosition="fixed"
                                                                        isLoading={!dropDownBuyers.length}
                                                                        isClearable
                                                                        theme={selectThemeColors}
                                                                        options={dropDownBuyers}
                                                                        classNamePrefix='dropdown'
                                                                        className="erp-dropdown-select"
                                                                        innerRef={register( { required: true } )}
                                                                        // className={classnames( 'react-select', { 'is-invalid': season === null } )}
                                                                        value={packagingInfo?.buyer}
                                                                        onFocus={() => { handleBuyerDropdownOnFocus(); }}
                                                                        onChange={data => {
                                                                            handleBuyerDropdown( data );
                                                                        }}
                                                                    />
                                                                </div>
                                                            </div>
                                                            <div className='custom-form-main'>
                                                                <Label className='custom-form-label' for='purchaseOrderId'>PO</Label>
                                                                <Label className='custom-form-colons'> : </Label>
                                                                <div className='custom-form-group'>
                                                                    <CreatableSelect
                                                                        id='purchaseOrderId'
                                                                        name="purchaseOrder"
                                                                        isSearchable
                                                                        isLoading={!buyerPurchaseOrderDropdown.length}
                                                                        menuPosition="fixed"
                                                                        isClearable
                                                                        theme={selectThemeColors}
                                                                        options={buyerPurchaseOrderDropdown}
                                                                        classNamePrefix='dropdown'
                                                                        className="erp-dropdown-select"
                                                                        innerRef={register( { required: true } )}
                                                                        // className={classnames( 'react-select', { 'is-invalid': season === null } )}
                                                                        value={packagingInfo?.purchaseOrder}
                                                                        onChange={data => {
                                                                            handlePoDropdown( data );
                                                                        }}
                                                                    />
                                                                </div>
                                                            </div>
                                                            <div className='custom-form-main'>
                                                                <Label className='custom-form-label' for='styleId'>Style</Label>
                                                                <Label className='custom-form-colons'> : </Label>
                                                                <div className='custom-form-group'>
                                                                    <CreatableSelect
                                                                        id='styleId'
                                                                        name="style"
                                                                        isSearchable
                                                                        menuPosition="fixed"
                                                                        isClearable
                                                                        theme={selectThemeColors}
                                                                        options={POStyles}
                                                                        classNamePrefix='dropdown'
                                                                        className="erp-dropdown-select"
                                                                        value={packagingInfo.style}
                                                                        onChange={data => { handleStyleDropDownChange( data ); }}
                                                                    />
                                                                </div>
                                                            </div>
                                                            <div className='custom-form-main'>
                                                                <Label className='custom-form-label' for='styleId'>Ctn. Series No</Label>
                                                                <Label className='custom-form-colons'> : </Label>
                                                                <div className='custom-form-group'>
                                                                    <Input
                                                                        id='cartoonNoId'
                                                                        name="cartoonSeriesNo"
                                                                        type="text"
                                                                        bsSize="sm"
                                                                        value={packagingInfo.cartoonSeriesNo}
                                                                        innerRef={register( { required: true } )}
                                                                        onChange={e => { handleInputChange( e ); }}
                                                                    />
                                                                </div>
                                                            </div>
                                                            <div className='custom-form-main'>
                                                                <Label className='custom-form-label ' for='sizeColorTypeId'>Types</Label>
                                                                <Label className='custom-form-colons '> : </Label>
                                                                <div className='custom-form-group '>
                                                                    <CreatableSelect
                                                                        id='sizeColorTypeId'
                                                                        name="sizeColorType"
                                                                        isSearchable
                                                                        menuPosition="fixed"
                                                                        isClearable
                                                                        theme={selectThemeColors}
                                                                        options={selectSizeColorType}
                                                                        classNamePrefix='dropdown'
                                                                        className="erp-dropdown-select"
                                                                        value={colorSizeType}
                                                                        onChange={data => { handleChangeSizeColorType( data ); }}
                                                                    />
                                                                </div>
                                                            </div>


                                                        </Col>
                                                        <Col xs={12} sm={12} md={7} lg={7} xl={7}>
                                                            <Row>
                                                                <Col xs={12} sm={12} md={6} lg={6} xl={6}>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='lengthId'>Length</Label>
                                                                        <Label className='custom-form-colons '> : </Label>
                                                                        <div className='custom-form-group '>
                                                                            <Input
                                                                                id='lengthId'
                                                                                type='number'
                                                                                name="length"
                                                                                value={packagingInfo?.length}
                                                                                placeholder='0.00'
                                                                                bsSize="sm"
                                                                                className='text-right'
                                                                                onFocus={e => e.target.select()}
                                                                                onChange={e => { handleInputChange( e ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='widthId'>Width</Label>
                                                                        <Label className='custom-form-colons'> : </Label>
                                                                        <div className='custom-form-group'>
                                                                            <Input
                                                                                id='widthId'
                                                                                type='number'
                                                                                name="width"
                                                                                bsSize="sm"
                                                                                value={packagingInfo?.width}
                                                                                placeholder='0.00'
                                                                                className='text-right'
                                                                                onFocus={e => e.target.select()}
                                                                                onChange={e => { handleInputChange( e ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='heightId'>Height</Label>
                                                                        <Label className='custom-form-colons '> : </Label>
                                                                        <div className='custom-form-group '>
                                                                            <Input
                                                                                id='heightId'
                                                                                type='number'
                                                                                name="height"
                                                                                bsSize="sm"
                                                                                value={packagingInfo?.height}
                                                                                placeholder='0.00'
                                                                                className='text-right'
                                                                                onFocus={e => e.target.select()}
                                                                                onChange={e => { handleInputChange( e ); }}
                                                                            />
                                                                        </div>
                                                                    </div>

                                                                </Col>
                                                                <Col xs={12} sm={12} md={6} lg={6} xl={6}>

                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='netWeightId'>Net wt.</Label>
                                                                        <Label className='custom-form-colons'> : </Label>
                                                                        <div className='custom-form-group'>
                                                                            <Input
                                                                                className="text-right"
                                                                                id='netWeightId'
                                                                                name="netWeight"
                                                                                type="number"
                                                                                bsSize="sm"
                                                                                value={packagingInfo.netWeight}
                                                                                innerRef={register( { required: true } )}
                                                                                onFocus={e => { e.target.select(); }}
                                                                                onChange={e => { handleInputChange( e ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='grossWeightId'>Gross wt.</Label>
                                                                        <Label className='custom-form-colons '> : </Label>
                                                                        <div className='custom-form-group '>
                                                                            <Input
                                                                                className="text-right"
                                                                                id='grossWeightId'
                                                                                name="grossWeight"
                                                                                type="number"
                                                                                bsSize="sm"
                                                                                value={packagingInfo.grossWeight}
                                                                                innerRef={register( { required: true } )}
                                                                                onFocus={e => { e.target.select(); }}
                                                                                onChange={e => { handleInputChange( e ); }}

                                                                            />
                                                                        </div>
                                                                    </div>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label ' for='sizeColorTypeId'>Ttl Pack Size</Label>
                                                                        <Label className='custom-form-colons '> : </Label>
                                                                        <div className='custom-form-group '>
                                                                            <Input
                                                                                className="text-right"
                                                                                id='totalPackSizeId'
                                                                                name="totalPackSize"
                                                                                type="number"
                                                                                bsSize="sm"
                                                                                value={packagingInfo.totalPackSize}
                                                                                innerRef={register( { required: true } )}
                                                                                onFocus={e => { e.target.select(); }}
                                                                                onChange={e => { handleInputChange( e ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                </Col>
                                                            </Row>
                                                            <Row>
                                                                <Col>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label col-div-12' for='colorId'>Color</Label>
                                                                        <Label className='custom-form-colons col-div-12'> : </Label>
                                                                        <div className='custom-form-group col-div-12'>
                                                                            <CreatableSelect
                                                                                id='colorId'
                                                                                name="color"
                                                                                isMulti={colorSizeType?.label === sizeColorTypeEnumObj.assortColorAndSolidSize || colorSizeType?.label === sizeColorTypeEnumObj.assortColorAndAssortSize}
                                                                                isSearchable
                                                                                menuPosition="fixed"
                                                                                isDisabled={!packagingInfo.style || !colorSizeType}
                                                                                classNamePrefix='dropdown'
                                                                                className="erp-dropdown-select"
                                                                                isClearable
                                                                                theme={selectThemeColors}
                                                                                options={styleColorsDropdown}
                                                                                value={color}
                                                                                onChange={data => { handleColorDropDownChange( data ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                </Col>
                                                            </Row>
                                                            <Row>
                                                                <Col>
                                                                    <div className='custom-form-main'>
                                                                        <Label className='custom-form-label col-div-12' for='sizeId'>Size</Label>
                                                                        <Label className='custom-form-colons col-div-12'> : </Label>
                                                                        <div className='custom-form-group col-div-12'>
                                                                            <CreatableSelect
                                                                                id='sizeId'
                                                                                name="size"
                                                                                isMulti={colorSizeType?.label === sizeColorTypeEnumObj.solidColorAndAssortSize || colorSizeType?.label === sizeColorTypeEnumObj.assortColorAndAssortSize}
                                                                                isSearchable
                                                                                isDisabled={!color.length}
                                                                                menuPosition="fixed"
                                                                                isClearable
                                                                                theme={selectThemeColors}
                                                                                options={styleSizesDropdown}
                                                                                classNamePrefix='dropdown'
                                                                                className="erp-dropdown-select"
                                                                                value={size}
                                                                                onChange={data => { handleSizeDropDownChange( data ); }}
                                                                            />
                                                                        </div>
                                                                    </div>
                                                                </Col>
                                                            </Row>
                                                        </Col>


                                                    </Row>
                                                </Col>
                                                <Col xs={12} sm={12} md={5} lg={5}>
                                                    <div className='border rounded pt-0 pr-1 pb-1 pl-1'>
                                                        <Label className="text-dark font-weight-bolder" for='totalPackSizeId'>Pack Details </Label>

                                                        {
                                                            ( size?.length > 0 ) ? <>
                                                                <div className="packing-scc-table">
                                                                    <Table size="sm" bordered>
                                                                        <thead className='thead-light  text-center'>
                                                                            <tr>
                                                                                <th style={{ width: '15px' }} className="text-nowrap">SL.</th>
                                                                                <th style={{ width: '95px' }} className="text-nowrap">Color</th>
                                                                                {sizeColorDetails?.map( i => (
                                                                                    i?.size?.map( is => (
                                                                                        <Fragment key={is.sizeName}>
                                                                                            <th>{is.sizeName}</th>
                                                                                        </Fragment>
                                                                                    ) )
                                                                                ) )[0]}
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody className="text-center">
                                                                            {sizeColorDetails?.map( ( i, idx ) => (
                                                                                <tr key={i.fieldId}>
                                                                                    <td className="text-nowrap">{idx + 1}</td>
                                                                                    <td className="text-nowrap">{i.colorName}</td>
                                                                                    {i?.size?.map( ( is ) => (
                                                                                        <Fragment key={is.sizeName}>
                                                                                            <td>
                                                                                                <Input
                                                                                                    className="text-right"
                                                                                                    type="number"
                                                                                                    bsSize="sm"
                                                                                                    onFocus={e => e.target.select()}
                                                                                                    value={is.inputValue}
                                                                                                    onChange={e => {
                                                                                                        handleSizeInputValueOnChange( e, i.fieldId, is.fieldId );
                                                                                                    }} />
                                                                                            </td>
                                                                                        </Fragment>
                                                                                    ) )}
                                                                                </tr>
                                                                            ) )}
                                                                        </tbody>
                                                                    </Table>
                                                                </div>
                                                            </> : <>
                                                                <div className="packing-scc-table">
                                                                    <Table size="sm" bordered>
                                                                        <thead className='thead-light  text-center'>
                                                                            <tr>
                                                                                <th style={{ width: '15px' }} className="text-nowrap">SL.</th>
                                                                                <th style={{ width: '95px' }} className="text-nowrap">Color</th>
                                                                                <th style={{ width: '95px' }} className="text-nowrap">Size</th>

                                                                            </tr>
                                                                        </thead>
                                                                        <tbody className="text-center">
                                                                            {sizeColorDetails?.map( ( i, idx ) => (
                                                                                <tr key={i.fieldId}>
                                                                                    <td className="text-nowrap">{idx + 1}</td>
                                                                                    <td className="text-nowrap">{i.colorName}</td>
                                                                                    <td className="text-nowrap">NA</td>

                                                                                </tr>
                                                                            ) )}
                                                                        </tbody>
                                                                    </Table>
                                                                </div>
                                                            </>
                                                        }
                                                    </div>

                                                </Col>

                                                {/* <Col xs={12} sm={12} md={6} lg={6} xl={6}>
                                                    <Label className="text-dark font-weight-bolder" for='totalPackSizeId'>Pack Details </Label>

                                                    {
                                                        ( size?.length > 0 ) &&
                                                        <>
                                                            <div className="packing-scc-table">
                                                                <Table size="sm" bordered>
                                                                    <thead className='thead-light  text-center'>
                                                                        <tr>
                                                                            <th style={{ width: '15px' }} className="text-nowrap">SL.</th>
                                                                            <th style={{ width: '95px' }} className="text-nowrap">Color</th>
                                                                            {sizeColorDetails?.map( i => (
                                                                                i?.size?.map( is => (
                                                                                    <Fragment key={is.sizeName}>
                                                                                        <th>{is.sizeName}</th>
                                                                                    </Fragment>
                                                                                ) )
                                                                            ) )[0]}
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody className="text-center">
                                                                        {sizeColorDetails?.map( ( i, idx ) => (
                                                                            <tr key={i.fieldId}>
                                                                                <td className="text-nowrap">{idx + 1}</td>
                                                                                <td className="text-nowrap">{i.colorName}</td>
                                                                                {i?.size?.map( ( is ) => (
                                                                                    <Fragment key={is.sizeName}>
                                                                                        <td>
                                                                                            <Input
                                                                                                className="text-right"
                                                                                                type="number"
                                                                                                bsSize="sm"
                                                                                                onFocus={e => e.target.select()}
                                                                                                value={is.inputValue}
                                                                                                onChange={e => {
                                                                                                    handleSizeInputValueOnChange( e, i.fieldId, is.fieldId );
                                                                                                }} />
                                                                                        </td>
                                                                                    </Fragment>
                                                                                ) )}
                                                                            </tr>
                                                                        ) )}
                                                                    </tbody>
                                                                </Table>
                                                            </div>
                                                        </>
                                                    }
                                                </Col> */}
                                            </Row>
                                            <Row>
                                                <Col xs={12} sm={12} md={12} lg={12} xl={12}>
                                                    <Label className="text-dark font-weight-bolder" for='totalPackSizeId'>Accessories Details</Label>
                                                    <PackagingAccessoriesDetails />
                                                </Col>
                                            </Row>

                                        </Col>
                                    </Row>

                                </div>
                            </Collapse>

                        </Col>

                    </Row>
                    <Row className="mt-1 ">
                        <Col >
                            <div onClick={() => { setPackagingDetailsOpen( !packagingDetailsOpen ); }}>
                                <div className='d-flex  justify-content-between'>
                                    <span className={packagingDetailsOpen ? 'font-weight-bolder border-bottom-success border-2' : 'font-weight-bolder'}>
                                        Packaging Details
                                    </span>

                                    <span >
                                        <Button.Ripple style={{ padding: '0.4rem' }} className='btn-icon' size="sm" color='flat-secondary'>
                                            <ChevronUp
                                                size={18}
                                                hidden={packagingDetailsOpen}
                                                color='grey'
                                                onClick={() => { setPackagingDetailsOpen( !packagingDetailsOpen ); }}
                                            />
                                            <ChevronDown
                                                hidden={!packagingDetailsOpen}
                                                size={18}
                                                color='grey'
                                                onClick={() => { setPackagingDetailsOpen( !packagingDetailsOpen ); }}
                                            />
                                        </Button.Ripple>

                                    </span>
                                </div>
                            </div>
                            <Collapse isOpen={packagingDetailsOpen}>
                                <div className=" p-1">
                                    <Row className="border rounded rounded-3 p-1">
                                        <Col xs={12} sm={12} md={12} lg={12} xl={12}>
                                            <SinglePackagingDetails packDetails={singlePackagingDetails} />
                                        </Col>
                                    </Row>
                                </div>
                            </Collapse>
                        </Col>
                    </Row>


                </CardBody>
            </Card>


        </div>
    );
};

export default PackagingForSingleStyle;
